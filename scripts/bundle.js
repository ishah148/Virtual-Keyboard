/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyboard */ \"./scripts/keyboard.js\");\n/* eslint-disable*/\r\n\r\n\r\nconst keyboard = new _keyboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"](localStorage.getItem('Lang') || 'en')\r\n\r\nlocalStorage.getItem('keyboardLang') || 'en';\n\n//# sourceURL=webpack://keyboard/./scripts/index.js?");

/***/ }),

/***/ "./scripts/keyboard.js":
/*!*****************************!*\
  !*** ./scripts/keyboard.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keys.js */ \"./scripts/keys.js\");\n/* eslint-disable*/\r\n\r\n\r\nclass Keyboard {\r\n    constructor(lang) {\r\n        this.lang = lang;\r\n        this.keys = [];\r\n        this.isCaps = false;\r\n        this.isShift = false;\r\n        this.isCtrl = false;\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.startPattern = `\r\n        <div class=\"keyboard-wrapper\" tabindex=\"1\">\r\n            <h1>Windows keyboard</h1>\r\n            <textarea name=\"\" id=\"textarea\" cols=\"50\" rows=\"7\" tabindex=\"-1\"></textarea>\r\n            <div class=\"keyboard\" tabindex=\"1\"></div>\r\n            <h1>Switch lang :  <b>Crtl + Shift</b></h1>\r\n        </div>\r\n        `\r\n        document.body.insertAdjacentHTML('afterbegin', this.startPattern)\r\n\r\n        this.elems = {\r\n            keyboard: document.querySelector('.keyboard'),\r\n            getCapsLock: function () { return document.getElementById('CapsLock'); },\r\n            getKeys: function () {\r\n                return document.querySelectorAll('.keyboard .key');\r\n            }\r\n        };\r\n        this.initKeys();\r\n        this.showKeys();\r\n        this.addEvents();\r\n        this.textarea = document.querySelector('textarea');\r\n        this.systemKeys = ['CapsLock', 'Shift', 'Control', 'Meta', 'Alt', 'Ctrl', 'Win'];\r\n    }\r\n\r\n    initKeys() {\r\n        for (let key in _keys_js__WEBPACK_IMPORTED_MODULE_0__.keysArr) {\r\n            this.keys.push(new _keys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](_keys_js__WEBPACK_IMPORTED_MODULE_0__.keysArr[key], this.lang, this.checkUppercase()));\r\n        }\r\n    }\r\n\r\n    showKeys(type = 'all') {\r\n        if (type === 'all') {\r\n            this.keys.forEach(key => document.querySelector('.keyboard').insertAdjacentHTML('beforeend', key.getHtml()));\r\n        }\r\n        if (type === 'standart') {\r\n            this.keys.forEach(key => {\r\n                if (key.type === 'standart') {\r\n                    document.querySelector('.keyboard').insertAdjacentHTML('beforeend', key.getHtml());\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    redrawSymbols(type) {\r\n        if (type === 'extraValue') {\r\n\r\n            this.keys.forEach(key => {\r\n                if (key.type === 'standart') {\r\n                    document.getElementById(key.code).classList.add('shift--pressed');\r\n                }\r\n            });\r\n        }\r\n        if (type === 'mainValue') {\r\n\r\n            this.keys.forEach(key => {\r\n                if (key.type === 'standart') {\r\n                    document.getElementById(key.code).classList.remove('shift--pressed');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    removeKeys() {\r\n        document.querySelectorAll('.keyboard *').forEach(i => i.remove());\r\n    }\r\n\r\n    checkUppercase() {\r\n        return this.isCtrl || this.isShift;\r\n    }\r\n\r\n    isPressed(i) {\r\n        return document.getElementById(i).classList.contains('pressed');\r\n    }\r\n\r\n    enterText(text) {\r\n        if (text === 'Enter') { text = '\\n'; }\r\n        if (text === 'Tab') {\r\n            text = '\\t';\r\n            document.getElementById('Tab').focus();\r\n            this.textarea.focus();\r\n            this.textarea.blur();\r\n        }\r\n        if (text === 'Backspace') {\r\n            let temp = this.textarea.textContent;\r\n            temp = temp.slice(0, temp.length - 1);\r\n            this.textarea.textContent = temp;\r\n            return;\r\n        }\r\n        if (text === 'Space') { text = ' '; }\r\n        if (this.systemKeys.includes(text)) { text = ''; }\r\n        if (text === 'ArrowLeft') { text = '◄'; }\r\n        if (text === 'ArrowRight') { text = '►'; }\r\n        if (text === 'ArrowUp') { text = '▲'; }\r\n        if (text === 'ArrowDown') { text = '▼'; }\r\n        this.textarea.textContent += text;\r\n    }\r\n\r\n    switchLang() {\r\n        if (this.lang === 'ru') {\r\n            this.lang = 'en';\r\n        } else if (this.lang === 'en') {\r\n            this.lang = 'ru';\r\n        }\r\n        localStorage.setItem('Lang', this.lang)\r\n        this.removeKeys();\r\n        this.keys = [];\r\n        this.initKeys();\r\n        this.keys.forEach(key => {\r\n            document.querySelector('.keyboard').insertAdjacentHTML('beforeend', key.getHtml());\r\n        });\r\n        setTimeout(() => {\r\n            this.elems.getKeys().forEach(key => key.classList.remove('pressed'));\r\n        }, 215);\r\n    }\r\n\r\n    addEvents() {\r\n        document.addEventListener('keydown', (event) => {\r\n            this.enterText(document.getElementById(event.code).innerText);\r\n\r\n            if (!document.getElementById(event.code).classList.contains('pressed') && event.code !== 'CapsLock') { // all keys: processing for style(.pressed)\r\n                document.getElementById(event.code).classList.toggle('pressed');\r\n            }\r\n            if (event.code === 'CapsLock' && !this.elems.getCapsLock().classList.contains('pressed')) {\r\n                this.redrawSymbols('extraValue');\r\n            }\r\n            if (event.code === 'CapsLock' && this.elems.getCapsLock().classList.contains('pressed')) {\r\n                this.redrawSymbols('mainValue');\r\n            }\r\n            if (!(event.code === 'ShiftLeft') && this.elems.getCapsLock().classList.contains('pressed')) {\r\n                // this.redrawSymbols('extraValue')\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n\r\n            if (event.code !== 'CapsLock') {\r\n                document.getElementById(event.code).classList.toggle('pressed');\r\n            }\r\n            if (event.code === 'CapsLock') {\r\n                this.elems.getCapsLock().classList.toggle('pressed');\r\n            }\r\n        });\r\n\r\n        // =============== Test ===============\r\n        document.addEventListener('keydown', (event) => {\r\n\r\n            if (event.code === 'ShiftLeft') {\r\n\r\n            }\r\n\r\n            if (event.code !== 'CapsLock') {\r\n\r\n            }\r\n        });\r\n        // =============== shift ===============\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if (event.code === 'ShiftLeft' && !this.elems.getCapsLock().classList.contains('pressed')) {\r\n                this.redrawSymbols('extraValue');\r\n            }\r\n            if (event.code === 'ShiftLeft' && this.elems.getCapsLock().classList.contains('pressed')) {\r\n                this.redrawSymbols('mainValue');\r\n            }\r\n            if (this.isPressed('ShiftLeft') && this.isPressed('ControlLeft')) {\r\n                this.switchLang();\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            if (event.code === 'ShiftLeft' && !this.elems.getCapsLock().classList.contains('pressed')) {\r\n\r\n                this.redrawSymbols('mainValue');\r\n            }\r\n            if (event.code === 'ShiftLeft' && this.elems.getCapsLock().classList.contains('pressed')) {\r\n                this.redrawSymbols('extraValue');\r\n            }\r\n        });\r\n\r\n        // =============== click ===============\r\n        this.elems.keyboard.addEventListener('click', (event) => {\r\n            let temp = event.path.filter(i => i.id)[0];\r\n            try {\r\n                this.enterText(temp.innerText);\r\n                if (temp.id !== 'CapsLock') {\r\n                    temp.classList.add('pressed');\r\n                    temp.addEventListener('transitionend', () => {\r\n                        temp.classList.remove('pressed');\r\n                    });\r\n                }\r\n                if (temp.id === 'CapsLock' && (!this.isPressed('CapsLock'))) {\r\n                    temp.classList.add('pressed');\r\n\r\n                    this.redrawSymbols('extraValue');\r\n                } else if (temp.id === 'CapsLock' && (this.isPressed('CapsLock'))) {\r\n                    temp.classList.remove('pressed');\r\n                    this.redrawSymbols('mainValue');\r\n                }\r\n            } catch (e) { }\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://keyboard/./scripts/keyboard.js?");

/***/ }),

/***/ "./scripts/keys.js":
/*!*************************!*\
  !*** ./scripts/keys.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Key),\n/* harmony export */   \"keysArr\": () => (/* binding */ keysArr)\n/* harmony export */ });\n/* eslint-disable*/\r\nclass Key {\r\n    constructor(obj, lang, uppercase = 'g') {\r\n        this.obj = obj;\r\n        this.lang = lang;\r\n        this.code = this.obj.code;\r\n        this.size = this.obj.size;\r\n        this.type = this.obj.type;\r\n        this.isUppercase = uppercase;\r\n        this.isPressed = false;\r\n        this.html = this.getHtml();\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n    }\r\n\r\n    getHtml() {\r\n        return `\r\n        <div class=\"key ${this.size} ${this.checkUppecase()}\" id =\"${this.code}\"> \r\n             <span class=\"extra-symbol\">${this.obj[this.lang].extraValue}</span>\r\n             <span class=\"main-symbol\">${this.obj[this.lang].mainValue}</span>\r\n        </div>\r\n       `\r\n    }\r\n\r\n    checkUppecase() {\r\n        return this.isUppercase === true ? 'shift--pressed' : ''\r\n    }\r\n    checkPressed() {\r\n        return this.isPressed === true ? 'pressed' : ''\r\n    }\r\n}\r\n\r\n\r\nlet keysArr = [\r\n    {\r\n        type: 'standart',\r\n        code: 'Backquote',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '~',\r\n            mainValue: '`'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ё',\r\n            mainValue: 'ё'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit1',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '!',\r\n            mainValue: '1'\r\n        },\r\n        ru: {\r\n            extraValue: '!',\r\n            mainValue: '1'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit2',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '@',\r\n            mainValue: '2'\r\n        },\r\n        ru: {\r\n            extraValue: '\"',\r\n            mainValue: '2'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit3',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '#',\r\n            mainValue: '3'\r\n        },\r\n        ru: {\r\n            extraValue: '№',\r\n            mainValue: '3'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit4',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '$',\r\n            mainValue: '4'\r\n        },\r\n        ru: {\r\n            extraValue: ';',\r\n            mainValue: '4'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit5',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '%',\r\n            mainValue: '5'\r\n        },\r\n        ru: {\r\n            extraValue: '%',\r\n            mainValue: '5'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit6',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '^',\r\n            mainValue: '6'\r\n        },\r\n        ru: {\r\n            extraValue: ':',\r\n            mainValue: '6'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit7',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '&',\r\n            mainValue: '7'\r\n        },\r\n        ru: {\r\n            extraValue: '?',\r\n            mainValue: '7'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit8',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '*',\r\n            mainValue: '8'\r\n        },\r\n        ru: {\r\n            extraValue: '*',\r\n            mainValue: '8'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit9',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '(',\r\n            mainValue: '9'\r\n        },\r\n        ru: {\r\n            extraValue: '(',\r\n            mainValue: '9'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Digit0',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: ')',\r\n            mainValue: '0'\r\n        },\r\n        ru: {\r\n            extraValue: ')',\r\n            mainValue: '0'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'keydown Minus',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '_',\r\n            mainValue: '-'\r\n        },\r\n        ru: {\r\n            extraValue: '_',\r\n            mainValue: '-'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'keydown Equal',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '+',\r\n            mainValue: '='\r\n        },\r\n        ru: {\r\n            extraValue: '+',\r\n            mainValue: '='\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Backspace',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Backspace',\r\n            mainValue: 'Backspace'\r\n        },\r\n        ru: {\r\n            extraValue: 'Backspace',\r\n            mainValue: 'Backspace'\r\n        },\r\n    },\r\n\r\n\r\n    // row2 =============== row2 ===============\r\n    {\r\n        type: 'standart',\r\n        code: 'Tab',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Tab',\r\n            mainValue: 'Tab'\r\n        },\r\n        ru: {\r\n            extraValue: 'Tab',\r\n            mainValue: 'Tab'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyQ',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Q',\r\n            mainValue: 'q'\r\n        },\r\n        ru: {\r\n            extraValue: 'Й',\r\n            mainValue: 'й'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyW',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'W',\r\n            mainValue: 'w'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ц',\r\n            mainValue: 'ц'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyE',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'E',\r\n            mainValue: 'e'\r\n        },\r\n        ru: {\r\n            extraValue: 'У',\r\n            mainValue: 'у'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyR',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'R',\r\n            mainValue: 'r'\r\n        },\r\n        ru: {\r\n            extraValue: 'К',\r\n            mainValue: 'к'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyT',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'T',\r\n            mainValue: 't'\r\n        },\r\n        ru: {\r\n            extraValue: 'Е',\r\n            mainValue: 'е'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyY',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Y',\r\n            mainValue: 'y'\r\n        },\r\n        ru: {\r\n            extraValue: 'Н',\r\n            mainValue: 'н'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyU',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'U',\r\n            mainValue: 'u'\r\n        },\r\n        ru: {\r\n            extraValue: 'Г',\r\n            mainValue: 'г'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyI',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'I',\r\n            mainValue: 'i'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ш',\r\n            mainValue: 'ш'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyO',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'O',\r\n            mainValue: 'o'\r\n        },\r\n        ru: {\r\n            extraValue: 'Щ',\r\n            mainValue: 'щ'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyP',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'P',\r\n            mainValue: 'p'\r\n        },\r\n        ru: {\r\n            extraValue: 'З',\r\n            mainValue: 'з'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'BracketLeft',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '{',\r\n            mainValue: '['\r\n        },\r\n        ru: {\r\n            extraValue: 'Х',\r\n            mainValue: 'х'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'BracketRight',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '}',\r\n            mainValue: ']'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ъ',\r\n            mainValue: 'ъ'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Backslash',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '|',\r\n            mainValue: '\\\\'\r\n        },\r\n        ru: {\r\n            extraValue: '/',\r\n            mainValue: '\\\\'\r\n        },\r\n    },\r\n    // =============== Row 3 ===============\r\n    {\r\n        type: 'system',\r\n        code: 'CapsLock',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'CapsLock',\r\n            mainValue: 'CapsLock'\r\n        },\r\n        ru: {\r\n            extraValue: 'CapsLock',\r\n            mainValue: 'CapsLock'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyA',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'A',\r\n            mainValue: 'a'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ф',\r\n            mainValue: 'ф'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyS',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'S',\r\n            mainValue: 's'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ы',\r\n            mainValue: 'ы'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyD',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'D',\r\n            mainValue: 'd'\r\n        },\r\n        ru: {\r\n            extraValue: 'В',\r\n            mainValue: 'в'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyF',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'F',\r\n            mainValue: 'f'\r\n        },\r\n        ru: {\r\n            extraValue: 'А',\r\n            mainValue: 'а'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyG',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'G',\r\n            mainValue: 'g'\r\n        },\r\n        ru: {\r\n            extraValue: 'П',\r\n            mainValue: 'п'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyH',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'H',\r\n            mainValue: 'h'\r\n        },\r\n        ru: {\r\n            extraValue: 'Р',\r\n            mainValue: 'р'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyJ',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'J',\r\n            mainValue: 'j'\r\n        },\r\n        ru: {\r\n            extraValue: 'О',\r\n            mainValue: 'о'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyK',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'K',\r\n            mainValue: 'k'\r\n        },\r\n        ru: {\r\n            extraValue: 'Л',\r\n            mainValue: 'л'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyL',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'L',\r\n            mainValue: 'l'\r\n        },\r\n        ru: {\r\n            extraValue: 'Д',\r\n            mainValue: 'д'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Semicolon',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: ':',\r\n            mainValue: ';'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ж',\r\n            mainValue: 'ж'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Quote',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '\"',\r\n            mainValue: '\\''\r\n        },\r\n        ru: {\r\n            extraValue: 'Э',\r\n            mainValue: 'э'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Enter',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Enter',\r\n            mainValue: 'Enter'\r\n        },\r\n        ru: {\r\n            extraValue: 'Enter',\r\n            mainValue: 'Enter'\r\n        },\r\n    },\r\n    // =============== ROW 4 ===============\r\n    {\r\n        type: 'system',\r\n        code: 'ShiftLeft',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Shift',\r\n            mainValue: 'Shift'\r\n        },\r\n        ru: {\r\n            extraValue: 'Shift',\r\n            mainValue: 'Shift'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyZ',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Z',\r\n            mainValue: 'z'\r\n        },\r\n        ru: {\r\n            extraValue: 'Я',\r\n            mainValue: 'я'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyX',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'X',\r\n            mainValue: 'x'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ч',\r\n            mainValue: 'ч'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyC',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'C',\r\n            mainValue: 'c'\r\n        },\r\n        ru: {\r\n            extraValue: 'С',\r\n            mainValue: 'с'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyV',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'V',\r\n            mainValue: 'v'\r\n        },\r\n        ru: {\r\n            extraValue: 'М',\r\n            mainValue: 'м'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyB',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'B',\r\n            mainValue: 'b'\r\n        },\r\n        ru: {\r\n            extraValue: 'И',\r\n            mainValue: 'и'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyN',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'N',\r\n            mainValue: 'n'\r\n        },\r\n        ru: {\r\n            extraValue: 'Т',\r\n            mainValue: 'т'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'KeyM',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'M',\r\n            mainValue: 'm'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ь',\r\n            mainValue: 'ь'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Comma',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '<',\r\n            mainValue: ','\r\n        },\r\n        ru: {\r\n            extraValue: 'Б',\r\n            mainValue: 'б'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Period',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '>',\r\n            mainValue: '.'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ю',\r\n            mainValue: 'ю'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Slash',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '?',\r\n            mainValue: '/'\r\n        },\r\n        ru: {\r\n            extraValue: ',',\r\n            mainValue: '.'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'ArrowUp',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '▲',\r\n            mainValue: '▲'\r\n        },\r\n        ru: {\r\n            extraValue: '▲',\r\n            mainValue: '▲'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'ShiftRight',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Shift',\r\n            mainValue: 'Shift'\r\n        },\r\n        ru: {\r\n            extraValue: 'Shift',\r\n            mainValue: 'Shift'\r\n        },\r\n    },\r\n    // =============== Row 5 ===============\r\n    {\r\n        type: 'system',\r\n        code: 'ControlLeft',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Ctrl',\r\n            mainValue: 'Ctrl'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ctrl',\r\n            mainValue: 'Ctrl'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'MetaLeft',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Win',\r\n            mainValue: 'Win'\r\n        },\r\n        ru: {\r\n            extraValue: 'Win',\r\n            mainValue: 'Win'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'AltLeft',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Alt',\r\n            mainValue: 'Alt'\r\n        },\r\n        ru: {\r\n            extraValue: 'Alt',\r\n            mainValue: 'Alt'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'Space',\r\n        size: 'space',\r\n        en: {\r\n            extraValue: 'Space',\r\n            mainValue: 'Space'\r\n        },\r\n        ru: {\r\n            extraValue: 'Space',\r\n            mainValue: 'Space'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'AltRight',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Alt',\r\n            mainValue: 'Alt'\r\n        },\r\n        ru: {\r\n            extraValue: 'Alt',\r\n            mainValue: 'Alt'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'ContextMenu',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: 'Menu',\r\n            mainValue: 'Menu'\r\n        },\r\n        ru: {\r\n            extraValue: 'Menu',\r\n            mainValue: 'Menu'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'ArrowLeft',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '◄',\r\n            mainValue: '◄'\r\n        },\r\n        ru: {\r\n            extraValue: '◄',\r\n            mainValue: '◄'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'ArrowDown',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '▼',\r\n            mainValue: '▼'\r\n        },\r\n        ru: {\r\n            extraValue: '▼',\r\n            mainValue: '▼'\r\n        },\r\n    },\r\n    {\r\n        type: 'standart',\r\n        code: 'ArrowRight',\r\n        size: 'standart-key',\r\n        en: {\r\n            extraValue: '►',\r\n            mainValue: '►'\r\n        },\r\n        ru: {\r\n            extraValue: '►',\r\n            mainValue: '►'\r\n        },\r\n    },\r\n    {\r\n        type: 'system',\r\n        code: 'ControlRight',\r\n        size: 'shift',\r\n        en: {\r\n            extraValue: 'Ctrl',\r\n            mainValue: 'Ctrl'\r\n        },\r\n        ru: {\r\n            extraValue: 'Ctrl',\r\n            mainValue: 'Ctrl'\r\n        },\r\n    },\r\n\r\n];\r\n\r\n\n\n//# sourceURL=webpack://keyboard/./scripts/keys.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.js");
/******/ 	
/******/ })()
;